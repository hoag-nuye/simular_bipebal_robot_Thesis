# === Information ================================================================
#  @author:       Ho√†ng Nguy√™n
#  Email:         nguyen80o08nguyen@gmail.com
#  Github:        hoag.nuye
#  Created Date:  2024-12-07
# === Information ================================================================

import time
import sys
import os
from collections import deque


def convert_second2time(times):
    # ƒê·∫£m b·∫£o ƒë·∫ßu v√†o l√† s·ªë nguy√™n
    times = int(times)
    # T√≠nh to√°n chi ti·∫øt t·ª´ng ƒë∆°n v·ªã th·ªùi gian
    days = times // 86400
    remaining_seconds = times % 86400

    hours = remaining_seconds // 3600
    remaining_seconds %= 3600

    minutes = remaining_seconds // 60
    seconds = remaining_seconds % 60

    # T·∫°o chu·ªói k·∫øt h·ª£p bi·ªÉu t∆∞·ª£ng
    # return f"{days:02d}düóì {hours:02d}h ‚è±{minutes:02d}m ‚è≤{seconds:02d}s ‚è≥"

    # T·∫°o chu·ªói k·∫øt qu·∫£
    result = []
    if days > 0:
        result.append(f"{days:02d}d")
    if hours > 0:
        result.append(f"{hours:02d}h")
    if minutes > 0:
        result.append(f"{minutes:02d}m")
    if seconds > 0 or not result:  # Lu√¥n hi·ªÉn th·ªã gi√¢y n·∫øu kh√¥ng c√≥ gi√° tr·ªã n√†o kh√°c
        result.append(f"{seconds:02d}s ‚è± ")

    return ":".join(result)


def colorize_bar(percent):
    """
    Chuy·ªÉn m√†u d·∫ßn t·ª´ ƒë·ªè sang xanh l√° c√¢y d·ª±a tr√™n % ti·∫øn ƒë·ªô.
    """

    red = int(255 * (1 - percent))  # M√†u ƒë·ªè gi·∫£m d·∫ßn
    green = int(255 * percent)  # M√†u xanh tƒÉng d·∫ßn
    color_code = f"\033[38;2;{red};{green};0m"  # M√£ ANSI m√†u

    if int(percent) == 1:
        color_code = "\033[0m"
    return color_code


def progress_console(total_steps, current_steps, begin_time, ncols=50):
    # C·∫≠p nh·∫≠t ph·∫ßn trƒÉm
    percent = current_steps / total_steps
    elapsed_time = time.time() - begin_time
    remaining_time = 0 if percent == 0 else elapsed_time / percent
    rate = 0 if elapsed_time == 0 else int(current_steps / elapsed_time)

    num_done = int(percent * ncols)
    num_left = ncols - num_done
    #  ====================== CONSOLE BEGIN ========================
    reset = "\033[0m"  # Reset m√†u v·ªÅ m·∫∑c ƒë·ªãnh
    # sys.stdout.write("\033[2J\033[H")  # x√≥a to√†n b·ªô m√†n h√¨nh v√† ƒë·∫∑t lai con tr·ªè
    os.system('cls')
    sys.stdout.write(f"Loading: {colorize_bar(percent)}{'‚ñà' * num_done}{reset}{'.' * num_left} {int(percent * 100)}%\n")
    sys.stdout.write(f"Samples: {current_steps}/{total_steps}\n")
    sys.stdout.write(f"Passed: {convert_second2time(elapsed_time)}\n")
    sys.stdout.write(f"Estimate: {convert_second2time(remaining_time)} \n")
    sys.stdout.write(f"Speed: {rate:} samples/second")
    sys.stdout.flush()
    #


def collect_progress_console(total_steps, current_steps, begin_time, ncols=50):
    # C·∫≠p nh·∫≠t ph·∫ßn trƒÉm
    percent = current_steps / total_steps
    #  ====================== CONSOLE BEGIN ========================

    elapsed_time = time.time() - begin_time
    remaining_time = 0 if percent == 0 else elapsed_time / percent
    rate = 0 if elapsed_time == 0 else int(current_steps / elapsed_time)
    num_done = int(percent * ncols)
    num_left = ncols - num_done

    reset = "\033[0m"  # Reset m√†u v·ªÅ m·∫∑c ƒë·ªãnh
    sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
    sys.stdout.write("\033[5B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng
    sys.stdout.write("\033[K")  # X√≥a d√≤ng hi·ªán t·∫°i
    for i in range(3):
        sys.stdout.write("\033[1B")  # Di chuy·ªÉn xu·ªëng 1 d√≤ng
        sys.stdout.write("\033[K")  # X√≥a d√≤ng hi·ªán t·∫°i
    sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
    sys.stdout.write("\033[5B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng
    sys.stdout.write("\033[K")  # X√≥a d√≤ng hi·ªán t·∫°ii
    sys.stdout.write(
        f"========= Collecting... =========\n"
        f"Loading: {colorize_bar(percent)}{'‚ñà' * num_done}{reset}{'.' * num_left} {int(percent * 100)}%\n"
        f"Samples: {current_steps}/{total_steps}\n"
        f"Collect estimate: {convert_second2time(remaining_time)}\n"
        f"Passed: {convert_second2time(elapsed_time)}\n"
        f"Speed: {rate:} samples/second")
    sys.stdout.flush()
    # ======================== END CONSOLE ========================


def data_processing_console(total_steps, current_steps, begin_time, ncols=50):
    # C·∫≠p nh·∫≠t ph·∫ßn trƒÉm
    percent = current_steps / total_steps
    #  ====================== CONSOLE BEGIN ========================

    elapsed_time = time.time() - begin_time
    remaining_time = 0 if percent == 0 else elapsed_time / percent
    rate = 0 if elapsed_time == 0 else int(current_steps / elapsed_time)
    num_done = int(percent * ncols)
    num_left = ncols - num_done

    reset = "\033[0m"  # Reset m√†u v·ªÅ m·∫∑c ƒë·ªãnh
    sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
    sys.stdout.write("\033[5B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng
    sys.stdout.write("\033[K")  # X√≥a d√≤ng hi·ªán t·∫°i
    sys.stdout.write("\033[1B\033[K\033[H\033[5B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng

    sys.stdout.write(
        f"Collected=======================>\n"
        f"========= Processing... =========\n"
        f"Loading: {colorize_bar(percent)}{'‚ñà' * num_done}{reset}{'.' * num_left} {int(percent * 100)}%\n"
        f"Processing estimate: {convert_second2time(remaining_time)}\n"
        f"Passed: {convert_second2time(elapsed_time)}\n")
    sys.stdout.flush()
    # ======================== END CONSOLE ========================


def train_progress_console(total_steps, current_steps, begin_time,
                           current_epoch, total_epoch,
                           actor_loss, critic_loss, mean_reward,
                           ncols=50):
    max_len = 5
    if not hasattr(train_progress_console, "history_line"):
        train_progress_console.history_line = deque(maxlen=max_len)  # Kh·ªüi t·∫°o thu·ªôc t√≠nh n·∫øu ch∆∞a c√≥
    else:
        if current_steps == total_steps:
            train_progress_console.history_line = deque(maxlen=max_len)

    train_progress_console.history_line.append(
                f"Iterator: {current_steps}, "
                f"Actor Loss: {actor_loss}, "
                f"Critic Loss: {critic_loss}, "
                f"Reward Mean: {mean_reward}\n")

    # C·∫≠p nh·∫≠t ph·∫ßn trƒÉm
    percent = current_steps / total_steps
    #  ====================== CONSOLE BEGIN ========================

    elapsed_time = time.time() - begin_time
    remaining_time = 0 if percent == 0 else elapsed_time / percent
    rate = 0 if elapsed_time == 0 else int(current_steps / elapsed_time)
    num_done = int(percent * ncols)
    num_left = ncols - num_done

    reset = "\033[0m"  # Reset m√†u v·ªÅ m·∫∑c ƒë·ªãnh
    sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
    sys.stdout.write("\033[5B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng
    for i in range(3):
        sys.stdout.write("\033[1B")  # Di chuy·ªÉn xu·ªëng 1 d√≤ng
        sys.stdout.write("\033[K")  # X√≥a d√≤ng hi·ªán t·∫°i
    sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
    sys.stdout.write("\033[5B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng

    sys.stdout.write(
        f"Collected===>Data processed===>\n"
        f"========= Training... =========\n"
        f"Loading: {colorize_bar(percent)}{'‚ñà' * num_done}{reset}{'.' * num_left} {int(percent * 100)}%\n"
        f"Epoch: {current_epoch}/{total_epoch}\n"
        f"Iterations: {current_steps}/{total_steps}\n"
        f"Collect estimate: {convert_second2time(remaining_time)}\n"
        f"Passed: {convert_second2time(elapsed_time)}\n"
        f"Speed: {rate:} iterations/second\n"
        f"=========~ Param ~=========\n"
    )
    if int(percent * 100) % 10 == 0:
        sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
        sys.stdout.write("\033[14B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng
        for _ in range(max_len):
            sys.stdout.write("\033[1B")  # Di chuy·ªÉn xu·ªëng 1 d√≤ng
            sys.stdout.write("\033[K")  # X√≥a d√≤ng hi·ªán t·∫°i
        sys.stdout.write("\033[H")  # ƒê∆∞a con tr·ªè v·ªÅ g√≥c tr√™n c√πng b√™n tr√°i
        sys.stdout.write("\033[14B")  # Di chuy·ªÉn xu·ªëng 5 d√≤ng
        for console_line in reversed(train_progress_console.history_line):
            sys.stdout.write(console_line)
        sys.stdout.flush()
# days = 10
# hours = 2
# minutes = 2
# seconds = 2
# # T·∫°o chu·ªói k·∫øt qu·∫£
# result = []
# if days > 0:
#     result.append(f"{days:02d}d")
# if hours > 0:
#     result.append(f"{hours:02d}h")
# if minutes > 0:
#     result.append(f"{minutes:02d}m")
# if seconds > 0 or not result:  # Lu√¥n hi·ªÉn th·ªã gi√¢y n·∫øu kh√¥ng c√≥ gi√° tr·ªã n√†o kh√°c
#     result.append(f"{seconds:02d}s ‚è±")
#
# print(":".join(result))

# total = 1000
# steps = 10
# current = 0  # B·∫Øt ƒë·∫ßu t·ª´ 0
#
# begin_time = time.time()
# while current < total:
#     start_time = time.time()
#     current += steps
#     time.sleep(0.05)  # Gi·∫£ l·∫≠p c√¥ng vi·ªác
#     progress_console(total_steps=total, current_steps=current, begin_time=begin_time)


# =========== TEST ===================
# import time
# import sys
#
#
# def tqdm_example(iterable, total=None, desc='', ncols=80, ascii=False):
#     # N·∫øu kh√¥ng c√≥ t·ªïng s·ªë ph·∫ßn t·ª≠, t√≠nh t·ªïng t·ª´ iterable
#     if total is None:
#         total = len(iterable)
#
#     # Thi·∫øt l·∫≠p thanh ti·∫øn tr√¨nh ban ƒë·∫ßu
#     # print(f"{desc} [{'.' * ncols}]")
#     i = 0
#     while i< 100:
#
#         # D·ª´ng l·∫°i m·ªôt ch√∫t ƒë·ªÉ gi·∫£ l·∫≠p ti·∫øn tr√¨nh
#         time.sleep(0.1)
#         i+=1
#         # T√≠nh to√°n ph·∫ßn trƒÉm ho√†n th√†nh
#         progress = (i + 1) / total
#         num_done = int(progress * ncols)
#         num_left = ncols - num_done
#
#         # In l·∫°i thanh ti·∫øn tr√¨nh (s·ª≠ d·ª•ng '\r' ƒë·ªÉ di chuy·ªÉn con tr·ªè v·ªÅ ƒë·∫ßu d√≤ng)
#         sys.stdout.write("\033[F" * 2)  # Di chuy·ªÉn con tr·ªè l√™n 1 d√≤ng tr∆∞·ªõc ƒë√≥
#         sys.stdout.write("\033[K")  # X√≥a to√†n b·ªô d√≤ng hi·ªán t·∫°i
#         sys.stdout.write(f"\r{desc} [{'‚ñà' * num_done}{'.' * num_left}] {int(progress * 100-1)}%\n")
#         sys.stdout.write(f"{num_done}/{num_left}")
#         sys.stdout.flush()
#
#     print()  # In m·ªôt d√≤ng tr·ªëng sau khi ho√†n th√†nh
#
#
# # V√≠ d·ª• s·ª≠ d·ª•ng tqdm_custom
# items = range(100)
# tqdm_example(items, desc="Processing")
